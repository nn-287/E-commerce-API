<?php

namespace App\Exceptions;

use http\Env\Response;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });


/*
        $this->renderable(function (NotFoundHttpException $e, $request,\Exception $exception)
        {
            dump($request);
            if ($request->is('img/http/*')) {
                return response()->json([
                    'status' => 204,
                    'message' => 'Data not found'
                ], 200);


            }
        });
*/
    }


    public function renderExceptionResponse($request, Throwable $e)
    {
/*
        if($request->expectsJson())
        {
            if($e instanceof ModelNotFoundException)
            {
                return response()->json([
                    'errors' => 'product model not found'
                ],404);
            }
        }
*/
        return parent::renderExceptionResponse($request, $e); // TODO: Change the autogenerated stub
        //return response()->json("Model Not Found",404);
    }
}
